"use client";

import React, { useState } from "react";
import { FiAlertTriangle, FiCheckCircle, FiDownload, FiInfo, FiStar } from "react-icons/fi";
import { AnalysisStatusInline } from "./analysis-status";

interface ResumeAnalysisProps {
  analysisResults: {
    overallScore: number;
    sectionScores: {
      summary: number;
      workExperience: number;
      skills: number;
      education: number;
      achievements: number;
      contactInfo: number;
      certifications: number;
      languages: number;
      projects: number;
      volunteerWork: number;
    };
    suggestions: {
      summary: string;
      workExperience: string;
      skills: string;
      education: string;
      achievements: string;
      contactInfo: string;
      certifications: string;
      languages: string;
      projects: string;
      volunteerWork: string;
    };
    improvedContent?: {
      [key: string]: string;
    };
    jobProfiles?: Array<{
      title: string;
      matchScore: number;
      reasoning: string;
    }>;
  };
  resumeText: string;
  onContentUpdate?: (updatedText: string) => void;
  analysisStatus?: 'partial' | 'complete';
  analysisNote?: string;
}

export function ResumeAnalysis({ analysisResults, resumeText, onContentUpdate, analysisStatus, analysisNote }: ResumeAnalysisProps) {
  const [activeTab, setActiveTab] = useState<"score" | "content">("score");
  const [editContent, setEditContent] = useState("");
  const [resumeLines, setResumeLines] = useState<string[]>(resumeText.split("\n"));
  
  // Update resume lines when text changes
  React.useEffect(() => {
    setResumeLines(resumeText.split("\n"));
  }, [resumeText]);
  
  // Get suggestions for each line from the AI response
  const getSuggestionForLine = (lineIndex: number, lineContent: string): string[] | null => {
    // Check if we have an AI-generated suggestion for this line
    if (analysisResults.improvedContent && analysisResults.improvedContent[lineIndex]) {
      const suggestion = analysisResults.improvedContent[lineIndex];
      // If it's a string, convert to array; if it's already an array, use as is
      return Array.isArray(suggestion) ? suggestion : [suggestion];
    }
    
    // Grammar and content improvement suggestions
    const suggestions: string[] = [];
    
    // Grammar checks
    if (lineContent.includes("i ") && !lineContent.includes("I ")) {
      suggestions.push("Capitalize &apos;I&apos; when referring to yourself");
    }
    if (lineContent.includes("  ")) {
      suggestions.push("Remove extra spaces");
    }
    if (lineContent.endsWith(".") && !lineContent.match(/[.!?]$/)) {
      suggestions.push("Add proper punctuation");
    }
    
    // Content improvement suggestions
    if (lineContent.includes("Manager") || lineContent.includes("manager")) {
      suggestions.push("Led cross-functional team of 5 engineers, resulting in 30% increase in product delivery speed.");
    }
    if (lineContent.includes("Developed") || lineContent.includes("developed")) {
      suggestions.push("Engineered scalable solutions that reduced system latency by 45% and increased user retention by 22%.");
    }
    if (lineContent.includes("Skills") || lineContent.includes("skills")) {
      suggestions.push("Expert in React, TypeScript, Node.js, AWS, CI/CD, and performance optimization.");
    }
    
    // Quantification suggestions
    if (lineContent.includes("improved") || lineContent.includes("increased") || lineContent.includes("reduced")) {
      if (!lineContent.match(/\d+%|\d+ percent/)) {
        suggestions.push("Add specific metrics and percentages to quantify your impact");
      }
    }
    
    return suggestions.length > 0 ? suggestions : null;
  };

  // Check if a line has improvements
  const hasImprovement = (lineIndex: number) => {
    return analysisResults.improvedContent && analysisResults.improvedContent[lineIndex];
  };

  // Download report function
  const downloadReport = () => {
    // Create a comprehensive report with overall score and section-wise scores
    const reportContent = `
Resume Analysis Report
Generated by ResumeCheck
${new Date().toLocaleDateString()}

OVERALL RESUME SCORE: ${analysisResults.overallScore}/100

SECTION-WISE SCORES:
${Object.entries(analysisResults.sectionScores)
  .map(([section, score]) => `${section.replace(/([A-Z])/g, ' $1').trim()}: ${score}/100`)
  .join('\n')}

DETAILED ANALYSIS:
${Object.entries(analysisResults.sectionScores)
  .map(([section, score]) => `
${section.replace(/([A-Z])/g, ' $1').trim()} (${score}/100):
${analysisResults.suggestions[section as keyof typeof analysisResults.suggestions]}
`)
  .join('\n')}

MISSING SECTIONS:
${missingSections.length > 0 ? missingSections.join(', ') : 'None detected'}

IMPROVEMENT OPPORTUNITIES:
${Object.entries(analysisResults.sectionScores)
  .filter(([, score]) => score < 80)
  .map(([section, score]) => `${section.replace(/([A-Z])/g, ' $1').trim()}: ${score}/100 - ${analysisResults.suggestions[section as keyof typeof analysisResults.suggestions]}`)
  .join('\n')}

---
Watermark: ResumeCheck - Professional Resume Analysis Tool
Generated on: ${new Date().toLocaleString()}
    `.trim();

    // Create blob and download
    const blob = new Blob([reportContent], { type: 'text/plain' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `resume-analysis-report-${new Date().toISOString().split('T')[0]}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  };
  
  const getSectionScoreColor = (score: number) => {
    if (score >= 80) return "text-green-500 dark:text-green-400";
    if (score >= 60) return "text-yellow-500 dark:text-yellow-400";
    return "text-red-500 dark:text-red-400";
  };

  const getScoreIcon = (score: number) => {
    if (score >= 80) return <FiCheckCircle className="h-5 w-5 text-green-500 dark:text-green-400" />;
    if (score >= 60) return <FiInfo className="h-5 w-5 text-yellow-500 dark:text-yellow-400" />;
    return <FiAlertTriangle className="h-5 w-5 text-red-500 dark:text-red-400" />;
  };

  // Function to detect missing resume sections
  const getMissingSections = () => {
    const missingSections: string[] = [];
    const resumeTextLower = resumeText.toLowerCase();
    
    // Check for common resume sections
    const sectionChecks = [
      { name: 'Professional Summary', keywords: ['summary', 'objective', 'profile', 'overview'] },
      { name: 'Work Experience', keywords: ['experience', 'employment', 'work history', 'career'] },
      { name: 'Education', keywords: ['education', 'degree', 'university', 'college', 'school'] },
      { name: 'Skills', keywords: ['skills', 'technical skills', 'competencies', 'expertise'] },
      { name: 'Achievements', keywords: ['achievements', 'accomplishments', 'awards', 'recognition'] },
      { name: 'Contact Information', keywords: ['email', 'phone', 'address', 'linkedin', 'github'] },
      { name: 'Certifications', keywords: ['certification', 'certified', 'license', 'accreditation'] },
      { name: 'Languages', keywords: ['languages', 'fluent', 'proficient', 'bilingual'] },
      { name: 'Projects', keywords: ['projects', 'portfolio', 'case studies', 'work samples'] },
      { name: 'Volunteer Work', keywords: ['volunteer', 'community service', 'charity', 'non-profit'] }
    ];
    
    sectionChecks.forEach(section => {
      const hasSection = section.keywords.some(keyword => resumeTextLower.includes(keyword));
      if (!hasSection) {
        missingSections.push(section.name);
      }
    });
    
    return missingSections;
  };

  const missingSections = getMissingSections();

  return (
    <div className="space-y-6">
      {/* Analysis Status */}
      {analysisStatus && (
        <div className="flex justify-center">
          <AnalysisStatusInline 
            status={analysisStatus} 
            note={analysisNote}
          />
        </div>
      )}

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="col-span-2 rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-900">
          <div className="flex flex-col md:flex-row md:items-center md:justify-between">
            <div className="mb-4 md:mb-0">
              <h2 className="text-2xl font-bold text-gray-900 dark:text-white">Overall Resume Score</h2>
              <p className="text-gray-600 dark:text-gray-400 mt-1">
                Based on industry standards and best practices
              </p>
            </div>
            <div className="relative flex justify-center">
              <svg viewBox="0 0 36 36" className="h-28 w-28">
                <path
                  className="stroke-current text-gray-200 dark:text-gray-700"
                  fill="none"
                  strokeWidth="3"
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                />
                <path
                  className={`stroke-current ${
                    analysisResults.overallScore >= 80
                      ? "text-green-500"
                      : analysisResults.overallScore >= 60
                      ? "text-yellow-500"
                      : "text-red-500"
                  }`}
                  fill="none"
                  strokeWidth="3"
                  strokeDasharray={`${analysisResults.overallScore}, 100`}
                  d="M18 2.0845 a 15.9155 15.9155 0 0 1 0 31.831 a 15.9155 15.9155 0 0 1 0 -31.831"
                />
                <text
                  x="18"
                  y="19"
                  className="fill-current text-xs font-bold text-gray-800 dark:text-white"
                  textAnchor="middle"
                >
                  {analysisResults.overallScore}
                </text>
                <text
                  x="18"
                  y="26"
                  className="fill-current text-[0.45rem] font-medium text-gray-400 dark:text-gray-500"
                  textAnchor="middle"
                >
                  SCORE
                </text>
              </svg>
              <div className="absolute bottom-1 right-1 rounded-full bg-blue-100 p-1.5 dark:bg-blue-900">
                {getScoreIcon(analysisResults.overallScore)}
              </div>
            </div>
          </div>
          
          <div className="mt-6 grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4">
            {Object.entries(analysisResults.sectionScores).map(([section, score]) => (
              <div 
                key={section} 
                className="flex items-center p-3 rounded-lg border border-gray-100 dark:border-gray-800 bg-gray-50 dark:bg-gray-900"
              >
                <div className={`h-8 w-8 rounded-full flex items-center justify-center mr-3 ${ 
                  score >= 80
                    ? "bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400"
                    : score >= 60
                    ? "bg-yellow-100 text-yellow-600 dark:bg-yellow-900/30 dark:text-yellow-400"
                    : "bg-red-100 text-red-600 dark:bg-red-900/30 dark:text-red-400"
                }`}>
                  {getScoreIcon(score)}
                </div>
                <div className="flex-1 min-w-0">
                  <p className="text-sm font-medium text-gray-900 dark:text-white capitalize">
                    {section.replace(/([A-Z])/g, ' $1').trim()}
                  </p>
                  <p className="text-xs text-gray-500 dark:text-gray-400">
                    Score: {score}/100
                  </p>
                </div>
              </div>
            ))}
          </div>
          
          {/* Missing Sections Alert */}
          {missingSections.length > 0 && (
            <div className="mt-6 p-4 rounded-lg border border-amber-200 bg-amber-50 dark:border-amber-800 dark:bg-amber-900/20">
              <div className="flex items-start">
                <FiAlertTriangle className="h-5 w-5 text-amber-600 dark:text-amber-400 mt-0.5 mr-3 flex-shrink-0" />
                <div className="flex-1">
                  <h3 className="text-sm font-medium text-amber-800 dark:text-amber-200">
                    Missing Resume Sections
                  </h3>
                  <p className="text-sm text-amber-700 dark:text-amber-300 mt-1">
                    Consider adding these sections to improve your resume completeness:
                  </p>
                  <div className="mt-2 flex flex-wrap gap-2">
                    {missingSections.map((section, index) => (
                      <span
                        key={index}
                        className="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-amber-100 text-amber-800 dark:bg-amber-900/30 dark:text-amber-200"
                      >
                        {section}
                      </span>
                    ))}
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
        
        <div className="rounded-lg border border-gray-200 bg-white p-6 shadow-sm dark:border-gray-800 dark:bg-gray-900">
          <h3 className="text-xl font-bold mb-4 text-gray-900 dark:text-white">Quick Actions</h3>
          <div className="space-y-3">
            <button
              className="inline-flex w-full items-center justify-center rounded-md bg-blue-600 px-4 py-3 text-sm font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
              onClick={() => {
                setActiveTab("score");
                setTimeout(() => {
                  // Find the tab navigation area (Section Scores | Resume Content & Editing)
                  const tabNavigation = document.querySelector('[data-tab-navigation]');
                  if (tabNavigation) {
                    const rect = tabNavigation.getBoundingClientRect();
                    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                    const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
                    // Scroll so that the tab navigation is centered in the viewport
                    window.scrollTo({
                      top: rect.top + scrollTop - (viewportHeight / 2) + (rect.height / 2),
                      behavior: "smooth"
                    });
                  }
                }, 100); // Wait for tab to render
              }}
            >
              View Section Scores
            </button>
            <button
              className="inline-flex w-full items-center justify-center rounded-md bg-green-600 px-4 py-3 text-sm font-medium text-white shadow-sm transition-colors hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
              onClick={() => {
                setActiveTab("content");
                setTimeout(() => {
                  // Find the tab navigation area (Section Scores | Resume Content & Editing)
                  const tabNavigation = document.querySelector('[data-tab-navigation]');
                  if (tabNavigation) {
                    const rect = tabNavigation.getBoundingClientRect();
                    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                    const viewportHeight = window.innerHeight || document.documentElement.clientHeight;
                    // Scroll so that the tab navigation is centered in the viewport
                    window.scrollTo({
                      top: rect.top + scrollTop - (viewportHeight / 2) + (rect.height / 2),
                      behavior: "smooth"
                    });
                  }
                }, 100); // Wait for tab to render
              }}
            >
              Resume Content Review and Suggestions
            </button>
            <button
              className="inline-flex w-full items-center justify-center rounded-md border border-gray-300 bg-white px-4 py-3 text-sm font-medium text-gray-700 shadow-sm transition-colors hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:border-gray-600 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700 dark:focus:ring-offset-gray-900"
              onClick={downloadReport}
            >
              Download Report
            </button>
          </div>
        </div>
      </div>

      <div className="overflow-hidden rounded-lg border border-gray-200 bg-white shadow-sm dark:border-gray-800 dark:bg-gray-900">
        <div className="border-b border-gray-200 dark:border-gray-800">
          <div data-tab-navigation className="flex">
            <button
              className={`px-8 py-4 text-sm font-medium focus:outline-none transition-colors ${
                activeTab === "score"
                  ? "border-b-2 border-blue-500 text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20"
                  : "text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-800"
              }`}
              onClick={() => setActiveTab("score")}
            >
              Section Scores
            </button>
            <button
              className={`px-8 py-4 text-sm font-medium focus:outline-none transition-colors ${
                activeTab === "content"
                  ? "border-b-2 border-blue-500 text-blue-600 dark:text-blue-400 bg-blue-50 dark:bg-blue-900/20"
                  : "text-gray-600 hover:text-gray-900 dark:text-gray-400 dark:hover:text-gray-100 hover:bg-gray-50 dark:hover:bg-gray-800"
              }`}
              onClick={() => setActiveTab("content")}
            >
              Review Resume Content
            </button>
          </div>
        </div>

        <div className="p-6 bg-white dark:bg-gray-900">
          {activeTab === "score" ? (
            <div id="section-scores" className="space-y-8">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {Object.entries(analysisResults.sectionScores).map(([section, score]) => (
                  <div 
                    key={section} 
                    className="rounded-lg border border-gray-100 dark:border-gray-800 bg-white dark:bg-gray-900 p-5 shadow-sm"
                  >
                    <div className="flex items-center justify-between mb-3">
                      <div className="flex items-center space-x-3">
                        <div className={`h-8 w-8 rounded-full flex items-center justify-center ${
                          score >= 80
                            ? "bg-green-100 text-green-600 dark:bg-green-900/30 dark:text-green-400"
                            : score >= 60
                            ? "bg-yellow-100 text-yellow-600 dark:bg-yellow-900/30 dark:text-yellow-400"
                            : "bg-red-100 text-red-600 dark:bg-red-900/30 dark:text-red-400"
                        }`}>
                          {getScoreIcon(score)}
                        </div>
                        <h3 className="text-lg font-bold capitalize text-gray-900 dark:text-white">
                          {section.replace(/([A-Z])/g, " $1").trim()}
                        </h3>
                      </div>
                      <span className={`text-xl font-bold ${getSectionScoreColor(score)}`}>
                        {score}
                      </span>
                    </div>
                    
                    <div className="mb-4">
                      <div className="flex justify-between text-xs mb-1">
                        <span className="text-gray-500 dark:text-gray-400">Poor</span>
                        <span className="text-gray-500 dark:text-gray-400">Excellent</span>
                      </div>
                      <div className="h-2.5 w-full rounded-full bg-gray-200 dark:bg-gray-700 overflow-hidden">
                        <div
                          className={`h-2.5 rounded-full ${
                            score >= 80
                              ? "bg-green-500"
                              : score >= 60
                              ? "bg-yellow-500"
                              : "bg-red-500"
                          }`}
                          style={{ width: `${score}%` }}
                        ></div>
                      </div>
                    </div>
                    
                    <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4 border border-gray-100 dark:border-gray-700">
                      <h4 className="text-sm font-medium mb-2 text-gray-700 dark:text-gray-300">Suggestions:</h4>
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        {analysisResults.suggestions[section as keyof typeof analysisResults.suggestions]}
                      </p>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                {/* Improvement Opportunities */}
                <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm dark:border-gray-800 dark:bg-gray-900">
                  <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">Improvement Opportunities</h3>
                  <ul className="space-y-4">
                    {Object.entries(analysisResults.sectionScores)
                      .filter(([, score]) => score < 80)
                      .map(([section, score]) => (
                        <li key={section} className="flex items-start space-x-3 p-3 rounded-lg bg-gray-50 dark:bg-gray-800">
                          <div className={`mt-0.5 h-6 w-6 rounded-full flex items-center justify-center flex-shrink-0 ${
                            score >= 60
                              ? "bg-yellow-100 text-yellow-600 dark:bg-yellow-900/30 dark:text-yellow-400"
                              : "bg-red-100 text-red-600 dark:bg-red-900/30 dark:text-red-400"
                          }`}>
                            {getScoreIcon(score)}
                          </div>
                          <div>
                            <p className="text-sm font-medium capitalize text-gray-900 dark:text-white">
                              {section.replace(/([A-Z])/g, " $1").trim()}
                            </p>
                            <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                              {analysisResults.suggestions[section as keyof typeof analysisResults.suggestions]}
                            </p>
                            <button 
                              className="mt-2 text-sm text-blue-600 hover:text-blue-500 dark:text-blue-400 font-medium flex items-center"
                              onClick={() => setActiveTab("content")}
                            >
                              Review Content <span className="ml-1">→</span>
                            </button>
                          </div>
                        </li>
                      ))}
                  </ul>
                </div>
                
                {/* Actions */}
                <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm dark:border-gray-800 dark:bg-gray-900">
                  <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">AI-Powered Actions</h3>
                  <div className="space-y-4">
                    <button
                      className="inline-flex w-full items-center justify-center rounded-md bg-blue-600 px-4 py-3 text-sm font-medium text-white shadow-sm transition-colors hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
                      onClick={() => setActiveTab("content")}
                    >
                      Review All Suggestions
                    </button>
                    <button
                      className="inline-flex w-full items-center justify-center rounded-md bg-green-600 px-4 py-3 text-sm font-medium text-white shadow-sm transition-colors hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 dark:focus:ring-offset-gray-900"
                    >
                      Generate Optimized CV
                    </button>
                    <div className="mt-3 p-3 bg-gray-50 dark:bg-gray-800 rounded-lg border border-gray-100 dark:border-gray-700">
                      <p className="text-sm text-gray-600 dark:text-gray-400">
                        Generate an optimized version of your resume with AI improvements tailored to your industry and target role.
                      </p>
                    </div>
                  </div>
                </div>
              </div>
              
              {/* Job Profile Matches */}
              {analysisResults.jobProfiles && analysisResults.jobProfiles.length > 0 && (
                <div className="rounded-lg border border-gray-200 bg-white p-5 shadow-sm dark:border-gray-800 dark:bg-gray-900">
                  <h3 className="text-lg font-bold mb-4 text-gray-900 dark:text-white">Recommended Job Profiles</h3>
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                    {analysisResults.jobProfiles.map((profile, index) => (
                      <div key={index} className="rounded-lg border border-gray-100 dark:border-gray-700 bg-gray-50 dark:bg-gray-800 p-4">
                        <div className="flex items-center justify-between mb-2">
                          <h4 className="font-semibold text-gray-900 dark:text-white text-sm">{profile.title}</h4>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium ${
                            profile.matchScore >= 80
                              ? "bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200"
                              : profile.matchScore >= 60
                              ? "bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200"
                              : "bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200"
                          }`}>
                            {profile.matchScore}% Match
                          </span>
                        </div>
                        <p className="text-sm text-gray-600 dark:text-gray-400">{profile.reasoning}</p>
                      </div>
                    ))}
                  </div>
                </div>
              )}
            </div>
          ) : (
            <div className="space-y-6">
              {/* Header Info */}
              <div className="bg-gradient-to-r from-blue-50 to-indigo-50 dark:from-blue-900/20 dark:to-indigo-900/20 rounded-lg p-6 border border-blue-100 dark:border-blue-800">
                <div className="flex items-center space-x-3 mb-4">
                  <div className="bg-blue-100 dark:bg-blue-800 p-3 rounded-full">
                    <FiInfo className="h-6 w-6 text-blue-600 dark:text-blue-400" />
                  </div>
                  <div>
                    <h3 className="text-lg font-semibold text-blue-800 dark:text-blue-300">AI-Powered Resume Review</h3>
                    <p className="text-blue-700 dark:text-blue-400">
                      Your resume has been analyzed by AI. Below you&apos;ll find detailed suggestions for each section with explanations of why these improvements matter.
                    </p>
                  </div>
                </div>
                
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 text-sm">
                  <div className="flex items-center space-x-2">
                    <div className="h-3 w-3 rounded-full bg-yellow-400"></div>
                    <span className="font-medium text-blue-800 dark:text-blue-300">Content Suggestions</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="h-3 w-3 rounded-full bg-green-400"></div>
                    <span className="font-medium text-blue-800 dark:text-blue-300">AI Improvements</span>
                  </div>
                  <div className="flex items-center space-x-2">
                    <div className="h-3 w-3 rounded-full bg-blue-400"></div>
                    <span className="font-medium text-blue-800 dark:text-blue-300">Section Analysis</span>
                  </div>
                </div>
              </div>
              
              <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                {/* Resume Content with Suggestions */}
                <div className="rounded-lg border border-gray-200 shadow-sm dark:border-gray-800 overflow-hidden">
                  <div className="bg-gradient-to-r from-gray-100 to-gray-50 dark:from-gray-800 dark:to-gray-700 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                    <h3 className="font-semibold text-gray-900 dark:text-white text-lg">Resume Content Analysis</h3>
                    <p className="text-sm text-gray-600 dark:text-gray-400 mt-1">
                      AI-powered suggestions for each line with detailed explanations
                    </p>
                  </div>
                  <div className="max-h-[800px] overflow-y-auto p-6 bg-gray-50 dark:bg-gray-900">
                    <div className="space-y-6">
                      {resumeLines.map((line, index) => {
                        const suggestions = getSuggestionForLine(index, line);
                        const hasImprovements = hasImprovement(index);
                        
                        return (
                          <div key={index} className="group">
                            {/* Content Card */}
                            <div className={`rounded-lg border-2 transition-all duration-200 ${
                              hasImprovements
                                ? 'bg-gradient-to-r from-yellow-50 to-amber-50 border-yellow-200 dark:from-yellow-900/20 dark:to-amber-900/20 dark:border-yellow-700'
                                : suggestions
                                ? 'bg-gradient-to-r from-blue-50 to-indigo-50 border-blue-200 dark:from-blue-900/20 dark:to-indigo-900/20 dark:border-blue-700'
                                : 'bg-white dark:bg-gray-800 border-gray-200 dark:border-gray-700 hover:border-gray-300 dark:hover:border-gray-600'
                            }`}>
                              
                              {/* Header with line number and status */}
                              <div className="flex items-center justify-between p-4 border-b border-gray-100 dark:border-gray-700">
                                <div className="flex items-center space-x-3">
                                  <span className="inline-flex items-center justify-center w-8 h-8 bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-400 text-sm font-medium rounded-full">
                                    {index + 1}
                                  </span>
                                  {hasImprovements && (
                                    <span className="inline-flex items-center rounded-full bg-yellow-100 px-3 py-1 text-sm font-medium text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200">
                                      AI Enhanced
                                    </span>
                                  )}
                                  {suggestions && !hasImprovements && (
                                    <span className="inline-flex items-center rounded-full bg-blue-100 px-3 py-1 text-sm font-medium text-blue-800 dark:bg-blue-900 dark:text-blue-200">
                                      Suggestions Available
                                    </span>
                                  )}
                                </div>
                              </div>
                              
                              {/* Original Content */}
                              <div className="p-4">
                                <h4 className="text-sm font-medium text-gray-500 dark:text-gray-400 mb-2 uppercase tracking-wide">
                                  Original Content
                                </h4>
                                <div className="text-gray-900 dark:text-white font-medium leading-relaxed">
                                  {line}
                                </div>
                              </div>
                              
                              {/* AI Suggestions */}
                              {suggestions && (
                                <div className="px-4 pb-4">
                                  <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-700">
                                    <h4 className="text-sm font-semibold text-blue-800 dark:text-blue-300 mb-3 flex items-center">
                                      AI Suggestions & Why They Matter
                                    </h4>
                                    <div className="space-y-3">
                                      {suggestions.map((suggestion, suggestionIndex) => (
                                        <div key={suggestionIndex} className="rounded-lg p-3">
                                          <div className="flex items-start space-x-2">
                                            <span className="text-blue-500 dark:text-blue-400 text-lg">•</span>
                                            <div>
                                              <p className="text-sm font-medium text-blue-900 dark:text-blue-200 mb-1">
                                                {suggestion}
                                              </p>
                                              <p className="text-xs text-blue-700 dark:text-blue-400">
                                                This improvement will enhance clarity, professionalism, and ATS compatibility.
                                              </p>
                                            </div>
                                          </div>
                                        </div>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              )}
                              
                              {/* AI Improved Version */}
                              {hasImprovements && (
                                <div className="px-4 pb-4">
                                  <div className="bg-gradient-to-r from-yellow-50 to-amber-50 dark:from-yellow-900/20 dark:to-amber-900/20 rounded-lg p-4 border border-yellow-200 dark:border-yellow-700">
                                    <h4 className="text-sm font-semibold text-yellow-800 dark:text-yellow-300 mb-3 flex items-center">
                                      AI Enhanced Version
                                    </h4>
                                    <div className="rounded-lg p-3">
                                      <p className="text-sm text-yellow-900 dark:text-yellow-200 font-medium">
                                        {analysisResults.improvedContent?.[index]}
                                      </p>
                                    </div>
                                    <p className="text-xs text-yellow-700 dark:text-yellow-400 mt-2">
                                      This enhanced version improves clarity, impact, and ATS optimization.
                                    </p>
                                  </div>
                                </div>
                              )}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </div>
                </div>
                
                <div className="space-y-6">
                  {/* AI Analysis Summary */}
                  <div className="rounded-lg border border-gray-200 bg-white shadow-sm dark:border-gray-800 dark:bg-gray-900 overflow-hidden">
                    <div className="bg-gradient-to-r from-gray-100 to-gray-50 dark:from-gray-800 dark:to-gray-700 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                      <h3 className="font-semibold text-gray-900 dark:text-white text-lg">AI Analysis Summary</h3>
                    </div>
                    <div className="p-6 space-y-4">
                      <div className="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4 border border-blue-200 dark:border-blue-800">
                        <h4 className="text-sm font-semibold text-blue-800 dark:text-blue-300 mb-2">Content Quality Metrics</h4>
                        <div className="grid grid-cols-2 gap-4 text-sm">
                          <div>
                            <p className="text-blue-700 dark:text-blue-400">Total Lines</p>
                            <p className="text-blue-900 dark:text-blue-200 font-semibold">{resumeLines.length}</p>
                          </div>
                          <div>
                            <p className="text-blue-700 dark:text-blue-400">Lines with Suggestions</p>
                            <p className="text-blue-900 dark:text-blue-200 font-semibold">{resumeLines.filter((_, i) => getSuggestionForLine(i, '')).length}</p>
                          </div>
                        </div>
                      </div>
                      
                      <div className="bg-green-50 dark:bg-green-900/20 rounded-lg p-4 border border-green-200 dark:border-green-800">
                        <h4 className="text-sm font-semibold text-green-800 dark:text-green-300 mb-2">Key Strengths Identified</h4>
                        <ul className="text-sm text-green-700 dark:text-green-300 space-y-2">
                          <li className="flex items-start space-x-2">
                            <span className="text-green-500 mt-1">✓</span>
                            <span>Strong technical skills and quantifiable achievements</span>
                          </li>
                          <li className="flex items-start space-x-2">
                            <span className="text-green-500 mt-1">✓</span>
                            <span>Clear project descriptions with measurable outcomes</span>
                          </li>
                          <li className="flex items-start space-x-2">
                            <span className="text-green-500 mt-1">✓</span>
                            <span>Professional formatting and structure</span>
                          </li>
                        </ul>
                      </div>
                      
                      <div className="bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4 border border-yellow-200 dark:border-yellow-800">
                        <h4 className="text-sm font-semibold text-yellow-800 dark:text-yellow-300 mb-2">Areas for Improvement</h4>
                        <ul className="text-sm text-yellow-700 dark:text-yellow-300 space-y-1 space-y-2">
                          <li className="flex items-start space-x-2">
                            <span className="text-yellow-500 mt-1">•</span>
                            <span>Some lines could benefit from stronger action verbs</span>
                          </li>
                          <li className="flex items-start space-x-2">
                            <span className="text-yellow-500 mt-1">•</span>
                            <span>Consider adding more quantifiable metrics</span>
                          </li>
                          <li className="flex items-start space-x-2">
                            <span className="text-yellow-500 mt-1">•</span>
                            <span>Ensure consistent formatting throughout</span>
                          </li>
                        </ul>
                      </div>
                    </div>
                  </div>
                  
                  {/* Missing Sections Recommendations */}
                  <div className="rounded-lg border border-gray-200 bg-white shadow-sm dark:border-gray-800 dark:bg-gray-900 overflow-hidden">
                    <div className="bg-gradient-to-r from-purple-100 to-pink-100 dark:from-purple-900/20 dark:to-pink-900/20 px-6 py-4 border-b border-gray-200 dark:border-gray-700">
                      <h3 className="font-semibold text-gray-900 dark:text-white text-lg">Missing Sections Analysis</h3>
                    </div>
                    <div className="p-6">
                      {missingSections.length > 0 ? (
                        <div className="space-y-4">
                          <p className="text-sm text-gray-600 dark:text-gray-400 mb-4">
                            The following sections are missing from your resume. Adding them can significantly improve your ATS score and professional presentation.
                          </p>
                          <div className="grid grid-cols-1 gap-3">
                            {missingSections.map((section, index) => (
                              <div key={index} className="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4 border border-purple-200 dark:border-purple-700">
                                <div className="flex items-start space-x-3">
                                  <div className="bg-purple-100 dark:bg-purple-800 p-2 rounded-full">
                                    <span className="text-purple-600 dark:text-purple-400 text-sm font-medium">+</span>
                                  </div>
                                  <div>
                                    <h4 className="text-sm font-semibold text-purple-800 dark:text-purple-300 mb-1">
                                      {section}
                                    </h4>
                                    <p className="text-xs text-purple-700 dark:text-purple-400">
                                      Adding this section will improve your resume&apos;s completeness and ATS compatibility.
                                    </p>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        </div>
                      ) : (
                        <div className="text-center py-8">
                          <div className="bg-green-100 dark:bg-green-900/30 p-3 rounded-full w-16 h-16 mx-auto mb-4 flex items-center justify-center">
                            <span className="text-green-600 dark:text-green-400 text-2xl">✓</span>
                          </div>
                          <h4 className="text-sm font-semibold text-green-800 dark:text-green-300 mb-2">
                            All Essential Sections Present!
                          </h4>
                          <p className="text-xs text-green-700 dark:text-green-400">
                            Your resume covers all the important sections that recruiters and ATS systems look for.
                          </p>
                        </div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
